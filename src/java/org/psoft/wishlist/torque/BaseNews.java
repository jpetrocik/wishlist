package org.psoft.wishlist.torque;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Nov 10 14:42:08 PST 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to News
 */
public abstract class BaseNews extends BaseObject
{
    /** The Peer class */
    private static final NewsPeer peer =
        new NewsPeer();

        
    /** The value for the newsId field */
    private int newsId;
      
    /** The value for the intials field */
    private String intials;
      
    /** The value for the info field */
    private String info;
      
    /** The value for the postedDate field */
    private Date postedDate;
      
    /** The value for the postedBy field */
    private String postedBy;
  
    
    /**
     * Get the NewsId
     *
     * @return int
     */
    public int getNewsId()
    {
        return newsId;
    }

                        
    /**
     * Set the value of NewsId
     *
     * @param v new value
     */
    public void setNewsId(int v) 
    {
    
                  if (this.newsId != v)
              {
            this.newsId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Intials
     *
     * @return String
     */
    public String getIntials()
    {
        return intials;
    }

                        
    /**
     * Set the value of Intials
     *
     * @param v new value
     */
    public void setIntials(String v) 
    {
    
                  if (!ObjectUtils.equals(this.intials, v))
              {
            this.intials = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Info
     *
     * @return String
     */
    public String getInfo()
    {
        return info;
    }

                        
    /**
     * Set the value of Info
     *
     * @param v new value
     */
    public void setInfo(String v) 
    {
    
                  if (!ObjectUtils.equals(this.info, v))
              {
            this.info = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the PostedDate
     *
     * @return Date
     */
    public Date getPostedDate()
    {
        return postedDate;
    }

                        
    /**
     * Set the value of PostedDate
     *
     * @param v new value
     */
    public void setPostedDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.postedDate, v))
              {
            this.postedDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the PostedBy
     *
     * @return String
     */
    public String getPostedBy()
    {
        return postedBy;
    }

                        
    /**
     * Set the value of PostedBy
     *
     * @param v new value
     */
    public void setPostedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.postedBy, v))
              {
            this.postedBy = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("NewsId");
              fieldNames.add("Intials");
              fieldNames.add("Info");
              fieldNames.add("PostedDate");
              fieldNames.add("PostedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("NewsId"))
        {
                return new Integer(getNewsId());
            }
          if (name.equals("Intials"))
        {
                return getIntials();
            }
          if (name.equals("Info"))
        {
                return getInfo();
            }
          if (name.equals("PostedDate"))
        {
                return getPostedDate();
            }
          if (name.equals("PostedBy"))
        {
                return getPostedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(NewsPeer.NEWS_ID))
        {
                return new Integer(getNewsId());
            }
          if (name.equals(NewsPeer.INTIALS))
        {
                return getIntials();
            }
          if (name.equals(NewsPeer.INFO))
        {
                return getInfo();
            }
          if (name.equals(NewsPeer.POSTED_DATE))
        {
                return getPostedDate();
            }
          if (name.equals(NewsPeer.POSTED_BY))
        {
                return getPostedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getNewsId());
            }
              if (pos == 1)
        {
                return getIntials();
            }
              if (pos == 2)
        {
                return getInfo();
            }
              if (pos == 3)
        {
                return getPostedDate();
            }
              if (pos == 4)
        {
                return getPostedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(NewsPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            System.out.println(dbName);
            System.out.println(con);
            
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    NewsPeer.doInsert((News) this, con);
                    setNew(false);
                }
                else
                {
                    NewsPeer.doUpdate((News) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }


                    
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  newsId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setNewsId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setNewsId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getNewsId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public News copy() throws TorqueException
    {
        return copyInto(new News());
    }
  
    protected News copyInto(News copyObj) throws TorqueException
    {
          copyObj.setNewsId(newsId);
          copyObj.setIntials(intials);
          copyObj.setInfo(info);
          copyObj.setPostedDate(postedDate);
          copyObj.setPostedBy(postedBy);
  
                    copyObj.setNewsId(0);
                                    
        
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public NewsPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("News:\n");
        str.append("NewsId = ")
           .append(getNewsId())
           .append("\n");
        str.append("Intials = ")
           .append(getIntials())
           .append("\n");
        str.append("Info = ")
           .append(getInfo())
           .append("\n");
        str.append("PostedDate = ")
           .append(getPostedDate())
           .append("\n");
        str.append("PostedBy = ")
           .append(getPostedBy())
           .append("\n");
        return(str.toString());
    }
}
