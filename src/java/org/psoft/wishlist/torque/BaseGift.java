package org.psoft.wishlist.torque;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Nov 10 14:42:08 PST 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Gift
 */
public abstract class BaseGift extends BaseObject
{
    /** The Peer class */
    private static final GiftPeer peer =
        new GiftPeer();

        
    /** The value for the giftId field */
    private int giftId;
      
    /** The value for the title field */
    private String title;
      
    /** The value for the descr field */
    private String descr;
      
    /** The value for the purchased field */
    private int purchased;
      
    /** The value for the purchasedBy field */
    private String purchasedBy;
      
    /** The value for the intials field */
    private String intials;
      
    /** The value for the isSecret field */
    private int isSecret;
  
    
    /**
     * Get the GiftId
     *
     * @return int
     */
    public int getGiftId()
    {
        return giftId;
    }

                        
    /**
     * Set the value of GiftId
     *
     * @param v new value
     */
    public void setGiftId(int v) 
    {
    
                  if (this.giftId != v)
              {
            this.giftId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Title
     *
     * @return String
     */
    public String getTitle()
    {
        return title;
    }

                        
    /**
     * Set the value of Title
     *
     * @param v new value
     */
    public void setTitle(String v) 
    {
    
                  if (!ObjectUtils.equals(this.title, v))
              {
            this.title = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Descr
     *
     * @return String
     */
    public String getDescr()
    {
        return descr;
    }

                        
    /**
     * Set the value of Descr
     *
     * @param v new value
     */
    public void setDescr(String v) 
    {
    
                  if (!ObjectUtils.equals(this.descr, v))
              {
            this.descr = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Purchased
     *
     * @return int
     */
    public int getPurchased()
    {
        return purchased;
    }

                        
    /**
     * Set the value of Purchased
     *
     * @param v new value
     */
    public void setPurchased(int v) 
    {
    
                  if (this.purchased != v)
              {
            this.purchased = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the PurchasedBy
     *
     * @return String
     */
    public String getPurchasedBy()
    {
        return purchasedBy;
    }

                        
    /**
     * Set the value of PurchasedBy
     *
     * @param v new value
     */
    public void setPurchasedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.purchasedBy, v))
              {
            this.purchasedBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Intials
     *
     * @return String
     */
    public String getIntials()
    {
        return intials;
    }

                        
    /**
     * Set the value of Intials
     *
     * @param v new value
     */
    public void setIntials(String v) 
    {
    
                  if (!ObjectUtils.equals(this.intials, v))
              {
            this.intials = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the IsSecret
     *
     * @return int
     */
    public int getIsSecret()
    {
        return isSecret;
    }

                        
    /**
     * Set the value of IsSecret
     *
     * @param v new value
     */
    public void setIsSecret(int v) 
    {
    
                  if (this.isSecret != v)
              {
            this.isSecret = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("GiftId");
              fieldNames.add("Title");
              fieldNames.add("Descr");
              fieldNames.add("Purchased");
              fieldNames.add("PurchasedBy");
              fieldNames.add("Intials");
              fieldNames.add("IsSecret");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("GiftId"))
        {
                return new Integer(getGiftId());
            }
          if (name.equals("Title"))
        {
                return getTitle();
            }
          if (name.equals("Descr"))
        {
                return getDescr();
            }
          if (name.equals("Purchased"))
        {
                return new Integer(getPurchased());
            }
          if (name.equals("PurchasedBy"))
        {
                return getPurchasedBy();
            }
          if (name.equals("Intials"))
        {
                return getIntials();
            }
          if (name.equals("IsSecret"))
        {
                return new Integer(getIsSecret());
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(GiftPeer.GIFT_ID))
        {
                return new Integer(getGiftId());
            }
          if (name.equals(GiftPeer.GIFT))
        {
                return getTitle();
            }
          if (name.equals(GiftPeer.DESCR))
        {
                return getDescr();
            }
          if (name.equals(GiftPeer.IS_PURCHASED))
        {
                return new Integer(getPurchased());
            }
          if (name.equals(GiftPeer.PURCHASED_BY))
        {
                return getPurchasedBy();
            }
          if (name.equals(GiftPeer.INTIALS))
        {
                return getIntials();
            }
          if (name.equals(GiftPeer.IS_SECRET))
        {
                return new Integer(getIsSecret());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getGiftId());
            }
              if (pos == 1)
        {
                return getTitle();
            }
              if (pos == 2)
        {
                return getDescr();
            }
              if (pos == 3)
        {
                return new Integer(getPurchased());
            }
              if (pos == 4)
        {
                return getPurchasedBy();
            }
              if (pos == 5)
        {
                return getIntials();
            }
              if (pos == 6)
        {
                return new Integer(getIsSecret());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(GiftPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    GiftPeer.doInsert((Gift) this, con);
                    setNew(false);
                }
                else
                {
                    GiftPeer.doUpdate((Gift) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }


                    
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  giftId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setGiftId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setGiftId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getGiftId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Gift copy() throws TorqueException
    {
        return copyInto(new Gift());
    }
  
    protected Gift copyInto(Gift copyObj) throws TorqueException
    {
          copyObj.setGiftId(giftId);
          copyObj.setTitle(title);
          copyObj.setDescr(descr);
          copyObj.setPurchased(purchased);
          copyObj.setPurchasedBy(purchasedBy);
          copyObj.setIntials(intials);
          copyObj.setIsSecret(isSecret);
  
                    copyObj.setGiftId(0);
                                                
        
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public GiftPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Gift:\n");
        str.append("GiftId = ")
           .append(getGiftId())
           .append("\n");
        str.append("Title = ")
           .append(getTitle())
           .append("\n");
        str.append("Descr = ")
           .append(getDescr())
           .append("\n");
        str.append("Purchased = ")
           .append(getPurchased())
           .append("\n");
        str.append("PurchasedBy = ")
           .append(getPurchasedBy())
           .append("\n");
        str.append("Intials = ")
           .append(getIntials())
           .append("\n");
        str.append("IsSecret = ")
           .append(getIsSecret())
           .append("\n");
        return(str.toString());
    }
}
